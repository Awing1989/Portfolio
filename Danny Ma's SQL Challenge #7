A. High Level Sales Analysis
1.  What was the total quantity sold for all products?
SELECT pd.product_name, SUM(qty)
FROM balanced_tree.sales AS sales
FULL OUTER JOIN balanced_tree.product_details AS pd
ON sales.prod_id=pd.product_id
GROUP BY pd.product_name 
ORDER BY pd.product_name DESC;

2.  What is the total generated revenue for all products before discounts?
SELECT SUM(qty*price)
FROM balanced_tree.sales 

3.  What was the total discount amount for all products?
SELECT ROUND(SUM(qty*price*discount*0.01), 2)
FROM balanced_tree.sales 

B. Transaction Analysis
1.  How many unique transactions were there?
SELECT COUNT(distinct txn_id)
FROM balanced_tree.sales 

2.  What is the average unique products purchased in each transaction?
WITH sub AS
(SELECT txn_id, COUNT(distinct prod_id) AS dis
FROM balanced_tree.sales 
GROUP BY txn_id)

SELECT ROUND(AVG(dis), 02)
FROM sub;

3.  What are the 25th, 50th and 75th percentile values for the revenue per transaction?
WITH sub AS
(SELECT txn_id, SUM(qty*price) AS revenue
FROM balanced_tree.sales 
GROUP BY txn_id)

SELECT  sub2 [offset(25)] AS p25,
        sub2 [offset(50)] AS p50,
        sub2 [offset(75)] AS p75  
FROM (SELECT approx_quantiles (revenue, 100) AS sub2 FROM sub) 

4.  What is the average discount value per transaction?
WITH sub AS 
(SELECT txn_id, SUM(qty*price*discount*0.01) AS avg_discount
FROM balanced_tree.sales 
GROUP BY txn_id)

SELECT ROUND(AVG(avg_discount), 2)
FROM sub

5.  What is the percentage split of all transactions for members vs non-members?
SELECT member, 
COUNT(distinct txn_id), 
ROUND(100*COUNT(distinct txn_id)/(SELECT COUNT(distinct txn_id) FROM balanced_tree.sales), 2) AS percent
FROM balanced_tree.sales
GROUP BY member

6.  What is the average revenue for member transactions and non-member transactions?
WITH sub AS 
(SELECT member, txn_id, SUM(qty*price) AS Total_revenue
FROM balanced_tree.sales 
GROUP BY member, txn_id)

SELECT member, ROUND(AVG(Total_revenue), 2)
FROM sub
GROUP BY member

C. Product Analysis
1.  What are the top 3 products by total revenue before discount?
SELECT prod_id, product_name, SUM(qty*sales.price) AS revenue
FROM balanced_tree.sales AS sales
INNER JOIN balanced_tree.product_details AS pd
ON sales.prod_id=pd.product_id
GROUP BY prod_id, product_name 
ORDER BY revenue DESC
LIMIT 3;

2.  What is the total quantity, revenue and discount for each segment?
SELECT segment_id, segment_name, SUM(qty) AS total_qty, SUM(qty*sales.price) AS total_revenue, ROUND(SUM(qty*sales.price*discount*0.01), 2) AS total_discount
FROM balanced_tree.sales AS sales
FULL OUTER JOIN balanced_tree.product_details AS pd
ON sales.prod_id=pd.product_id
GROUP BY segment_id, segment_name
ORDER BY total_revenue DESC;

3.  What is the top selling product for each segment?
WITH sub AS 
(SELECT segment_id, segment_name, product_id, product_name, SUM(qty) AS Total_sold,
RANK () OVER (
  PARTITION BY segment_name
  ORDER BY SUM(qty) DESC
)AS RANK1
FROM balanced_tree.sales AS sales
FULL OUTER JOIN balanced_tree.product_details AS pd
ON sales.prod_id=pd.product_id
GROUP BY segment_id, segment_name, product_id, product_name)

SELECT segment_id, segment_name, product_id, product_name, total_sold
FROM sub
WHERE rank1=1
ORDER BY total_sold DESC

4.  What is the total quantity, revenue and discount for each category?
SELECT category_id, 
    category_name, 
    SUM(qty) AS total_quantity, 
    SUM(qty*sales.price) AS total_revenue, 
    ROUND(SUM(qty*sales.price*discount*0.01), 2) AS total_discount
FROM balanced_tree.sales AS sales
FULL OUTER JOIN balanced_tree.product_details AS pd
ON sales.prod_id=pd.product_id
GROUP BY category_id, category_name
ORDER BY total_revenue DESC

5.  What is the top selling product for each category?
WITH sub AS (SELECT category_id, 
    category_name, 
    product_id,
    product_name,
    SUM(qty) AS total_quantity, 
    RANK () OVER (
      PARTITION BY category_name
      ORDER BY SUM(qty*sales.price) DESC
    ) AS Rank_Revenue
FROM balanced_tree.sales AS sales
FULL OUTER JOIN balanced_tree.product_details AS pd
ON sales.prod_id=pd.product_id
GROUP BY category_id, category_name, product_id, product_name)

SELECT category_id, category_name, product_id, product_name, total_quantity
FROM sub
WHERE RANK_REVENUE=1
ORDER BY total_quantity DESC;

6.  What is the percentage split of revenue by product for each segment?

What is the percentage split of revenue by segment for each category?
What is the percentage split of total revenue by category?
What is the total transaction “penetration” for each product? (hint: penetration = number of transactions where at least 1 quantity of a product was purchased divided by total number of transactions)
What is the most common combination of at least 1 quantity of any 3 products in a 1 single transaction?
